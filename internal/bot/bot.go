package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aidosgal/lenshub/internal/model"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserService interface {
	CreateUser(model.User) error
    GetUserByChatID(chatID string) (*model.User, error)
    GetUsersBySpecialization(specialization string) ([]model.User, error)
}

type OrderService interface {
    CreateOrder(order model.Order) (model.Order, error)
    GetOrderByID(orderID string) (model.Order, error)
}

type OrderResponseService interface {
    CreateOrderResponse(orderID string, executorID int) error
}

type TgBot struct {
	bot        tgbotapi.BotAPI
	service    UserService
    orderService OrderService
    orderResponseService OrderResponseService
	userStates map[int64]string // Tracks the state of users
	userData   map[int64]*model.User
    orderData   map[int64]*model.Order
	stateMutex sync.Mutex
}

const (
	StateChoosingRole           = "choosing_role"
	StateEnteringPortfolio      = "entering_portfolio"
	StateChoosingSpecialization = "choosing_specialization"
	StateIdle                   = "idle"
    StateEnteringOrderTitle       = "entering_order_title"
    StateEnteringOrderDescription = "entering_order_description"
    StateEnteringOrderLocation    = "entering_order_location"
    StateChoosingOrderSpecialization = "choosing_order_specialization"
)

func NewTgBot(token string, service UserService, order OrderService, orderOrderResponseService OrderResponseService) *TgBot {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		panic(err)
	}
	return &TgBot{
		bot:        *bot,
		service:    service,
        orderService: order,
        orderResponseService: orderOrderResponseService,
		userStates: make(map[int64]string),
		userData:   make(map[int64]*model.User),
		orderData:   make(map[int64]*model.Order),
	}
}

func (tg *TgBot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tg.bot.GetUpdatesChan(u)

	for update := range updates {
        log.Printf("Received update: %+v\n", update)
		if update.Message != nil {
			tg.handleMessage(update.Message)
		}

		if update.CallbackQuery != nil {
			tg.handleCallbackQuery(update.CallbackQuery)
		}
	}
}

func (tg *TgBot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
    chat_id := strconv.Itoa(int(chatID))

	tg.stateMutex.Lock()
	state := tg.userStates[chatID]
	tg.stateMutex.Unlock()

	if message.Text == "/start" {
        if user, err := tg.service.GetUserByChatID(chat_id); err == nil && user != nil {
            tg.showUserProfile(chatID, user)
            return
        }
		tg.stateMutex.Lock()
		tg.userStates[message.Chat.ID] = StateChoosingRole
		tg.stateMutex.Unlock()

        welcomeText := `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LensHub!

–ú—ã —Å–æ–µ–¥–∏–Ω—è–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –∏ –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ–æ–≤ —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:`

		buttons := [][]tgbotapi.InlineKeyboardButton{
            {
                tgbotapi.NewInlineKeyboardButtonData("ü§ù –Ø –∑–∞–∫–∞–∑—á–∏–∫", "role_customer"),
                tgbotapi.NewInlineKeyboardButtonData("üì∏ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "role_executor"),
            },
        }
		keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

        response := tgbotapi.NewMessage(message.Chat.ID, welcomeText)
        response.ReplyMarkup = keyboard
        tg.bot.Send(response)
	}

	switch state {
	case StateEnteringPortfolio:
		tg.handlePortfolioInput(message)
    case StateEnteringOrderTitle:
        tg.handleOrderTitleInput(message)
    case StateEnteringOrderDescription:
        tg.handleOrderDescriptionInput(message)
    case StateEnteringOrderLocation:
        tg.handleOrderLocationInput(message)
	default:
		//response := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		//tg.bot.Send(response)
	}
}

func (tg *TgBot) showUserProfile(chatID int64, user *model.User) {
    var profileText string
    var buttons [][]tgbotapi.InlineKeyboardButton

    if user.Role == "–ó–∞–∫–∞–∑—á–∏–∫" {
        profileText = fmt.Sprintf(`üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*
        
üìã *–†–æ–ª—å:* –ó–∞–∫–∞–∑—á–∏–∫
üë§ *–ò–º—è:* %s
üîç *Username:* @%s

–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?`, user.Name, user.UserName)

        buttons = [][]tgbotapi.InlineKeyboardButton{
            {
                tgbotapi.NewInlineKeyboardButtonData("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", "create_order"),
                tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "my_orders"),
            },
        }
    } else {
        profileText = fmt.Sprintf(`üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*
        
üì∏ *–†–æ–ª—å:* –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
üë§ *–ò–º—è:* %s
üîç *Username:* @%s
üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* %s

–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?`, user.Name, user.UserName, user.Specialization)

        buttons = [][]tgbotapi.InlineKeyboardButton{
            {
                tgbotapi.NewInlineKeyboardButtonURL("üé® –ú–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", user.Portfolio),
            },
        }
    }

    keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
    msg := tgbotapi.NewMessage(chatID, profileText)
    msg.ParseMode = "Markdown"
    msg.ReplyMarkup = keyboard
    tg.bot.Send(msg)
}

func (tg *TgBot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
    chatID := callbackQuery.Message.Chat.ID
    data := callbackQuery.Data
    log.Printf("Handling callback query with data: %s for chatID: %d", data, chatID)

    // Create a copy of userData before locking
    var userData *model.User
    chat_id := strconv.Itoa(int(chatID))

    tg.stateMutex.Lock()
    if existing, ok := tg.userData[chatID]; ok {
        userData = &model.User{
            Name:           callbackQuery.From.FirstName,
            UserName:           callbackQuery.From.UserName,
            Role:           existing.Role,
            ChatId:        chat_id,
            Portfolio:      existing.Portfolio,
            Specialization: existing.Specialization,
        }
    } else {
        userData = &model.User{ChatId: chat_id}
    }
    tg.stateMutex.Unlock()

    switch { 
    case data == "role_customer":
        userData.Role = "–ó–∞–∫–∞–∑—á–∏–∫"
        userData.Name = callbackQuery.From.FirstName
        userData.UserName = callbackQuery.From.UserName
        if err := tg.service.CreateUser(*userData); err != nil {
            log.Printf("Error creating customer: %v", err)
            response := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            tg.bot.Send(response)
            return
        }
        
        tg.stateMutex.Lock()
        tg.userStates[chatID] = StateIdle
        tg.userData[chatID] = userData
        tg.stateMutex.Unlock()

        successMsg := fmt.Sprintf(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

ü§ù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∑–∞–∫–∞–∑—á–∏–∫–æ–≤, %s!

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏`, userData.Name)

        response := tgbotapi.NewMessage(chatID, successMsg)
        tg.bot.Send(response)
        tg.showUserProfile(chatID, userData)

    case data == "role_executor":
        userData.Role = "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        
        portfolioMsg := `üì∏ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.

–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
- –°—Å—ã–ª–∫–∞ –Ω–∞ Instagram
- –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—á–Ω—ã–π —Å–∞–π—Ç
- –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å —Ä–∞–±–æ—Ç–∞–º–∏
- –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ä–µ—Å—É—Ä—Å —Å –≤–∞—à–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏`

        tg.stateMutex.Lock()
        tg.userStates[chatID] = StateEnteringPortfolio
        tg.userData[chatID] = userData
        tg.stateMutex.Unlock()

        response := tgbotapi.NewMessage(chatID, portfolioMsg)
        tg.bot.Send(response)

    case data == "specialization_videographer" || data == "specialization_photographer":
        userData.Specialization = map[string]string{
            "specialization_videographer": "–í–∏–¥–µ–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä",
            "specialization_photographer": "–§–æ—Ç–æ–≥—Ä–∞—Ñ",
        }[data]
        
        go tg.completeExecutorRegistration(chatID, userData)    
    case data == "create_order":
        tg.startOrderCreation(chatID)
    case strings.HasPrefix(data, "respond_to_order:"):
        orderID := strings.Split(data, ":")[1]
        tg.handleOrderResponse(chatID, orderID)
    case data == "order_spec_videographer" || data == "order_spec_photographer":
        tg.handleOrderSpecializationSelection(chatID, data)
    }
}

func (tg *TgBot) startOrderCreation(chatID int64) {
    tg.stateMutex.Lock()
    tg.orderData[chatID] = &model.Order{}
    tg.userStates[chatID] = StateChoosingOrderSpecialization
    tg.stateMutex.Unlock()

    specMsg := `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:

- –í–∏–¥–µ–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä - —Å—ä–µ–º–∫–∞ –∏ –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ
- –§–æ—Ç–æ–≥—Ä–∞—Ñ - —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ`

    buttons := [][]tgbotapi.InlineKeyboardButton{
        {
            tgbotapi.NewInlineKeyboardButtonData("üé• –í–∏–¥–µ–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä", "order_spec_videographer"),
            tgbotapi.NewInlineKeyboardButtonData("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ", "order_spec_photographer"),
        },
    }
    keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

    response := tgbotapi.NewMessage(chatID, specMsg)
    response.ReplyMarkup = keyboard
    tg.bot.Send(response)
}


func (tg *TgBot) completeExecutorRegistration(chatID int64, userData *model.User) {
    log.Printf("Starting executor registration for chatID: %d with data: %+v", chatID, userData)
    
    err := tg.service.CreateUser(*userData)
    if err != nil {
        log.Printf("Error creating executor: %v", err)
        errorMsg := `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
        response := tgbotapi.NewMessage(chatID, errorMsg)
        if _, err := tg.bot.Send(response); err != nil {
            log.Printf("Error sending error message: %v", err)
        }
        return
    }
    log.Println("User created successfully in database")

    tg.stateMutex.Lock()
    tg.userStates[chatID] = StateIdle
    tg.userData[chatID] = userData
    tg.stateMutex.Unlock()
    log.Println("User state updated to idle")

    successMsg := fmt.Sprintf(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üé® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, %s!

–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: %s

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
- –û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
- –û–±—â–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–∞–º–∏`, userData.Name, userData.Specialization)

    response := tgbotapi.NewMessage(chatID, successMsg)
    if _, err := tg.bot.Send(response); err != nil {
        log.Printf("Error sending confirmation: %v", err)
        return
    }
    
    tg.showUserProfile(chatID, userData)
    
    log.Printf("Registration completed successfully for chatID: %d", chatID)
}

func (tg *TgBot) handlePortfolioInput(message *tgbotapi.Message) {
    chatID := message.Chat.ID
    tg.userData[chatID].Portfolio = message.Text

    tg.stateMutex.Lock()
    tg.userStates[chatID] = StateChoosingSpecialization
    tg.stateMutex.Unlock()

    specMsg := `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:

- –í–∏–¥–µ–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä - —Å—ä–µ–º–∫–∞ –∏ –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ
- –§–æ—Ç–æ–≥—Ä–∞—Ñ - —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ`

    buttons := [][]tgbotapi.InlineKeyboardButton{
        {
            tgbotapi.NewInlineKeyboardButtonData("üé• –í–∏–¥–µ–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä", "specialization_videographer"),
            tgbotapi.NewInlineKeyboardButtonData("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ", "specialization_photographer"),
        },
    }
    keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

    response := tgbotapi.NewMessage(chatID, specMsg)
    response.ReplyMarkup = keyboard
    tg.bot.Send(response)
}

func (tg *TgBot) handleOrderTitleInput(message *tgbotapi.Message) {
    chatID := message.Chat.ID
    
    tg.stateMutex.Lock()
    tg.orderData[chatID].Title = message.Text
    tg.userStates[chatID] = StateEnteringOrderDescription
    tg.stateMutex.Unlock()

    msg := `üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞:

–ù–∞–ø—Ä–∏–º–µ—Ä:
- –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
- –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å—ä–µ–º–∫–∞
- –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è`

    response := tgbotapi.NewMessage(chatID, msg)
    tg.bot.Send(response)
}

func (tg *TgBot) handleOrderDescriptionInput(message *tgbotapi.Message) {
    chatID := message.Chat.ID
    
    tg.stateMutex.Lock()
    tg.orderData[chatID].Description = message.Text
    tg.userStates[chatID] = StateEnteringOrderLocation
    tg.stateMutex.Unlock()

    msg := `üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å—ä–µ–º–∫–∏:

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ê–ª–º–∞—Ç—ã, –ø–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ" –∏–ª–∏ "–°—Ç—É–¥–∏—è –Ω–∞ –ê–±–∞—è 150"`

    response := tgbotapi.NewMessage(chatID, msg)
    tg.bot.Send(response)
}

func (tg *TgBot) handleOrderLocationInput(message *tgbotapi.Message) {
    chatID := message.Chat.ID
    
    tg.stateMutex.Lock()
    order := tg.orderData[chatID]
    order.Location = message.Text
    order.CreatedAt = time.Now()
    user, err := tg.service.GetUserByChatID(strconv.FormatInt(chatID, 10))
    if err != nil {
        log.Printf("Error getting user: %v", err)
        response := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        tg.bot.Send(response)

        return
    }
    order.User = *user
    tg.userStates[chatID] = StateIdle
    defer tg.stateMutex.Unlock()

    // Create order in database
    createdOrder, err := tg.orderService.CreateOrder(*order)
    if err != nil {
        log.Printf("Error creating order: %v", err)
        response := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        tg.bot.Send(response)
        return
    }

    // Notify user about successful creation
    successMsg := fmt.Sprintf(`‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üìã *%s*
üìù %s
üìç %s

–ú—ã —É–≤–µ–¥–æ–º–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ.`, order.Title, order.Description, order.Location)

    response := tgbotapi.NewMessage(chatID, successMsg)
    response.ParseMode = "Markdown"
    tg.bot.Send(response)

    // Notify potential executors
    tg.notifyExecutors(&createdOrder)
}

func (tg *TgBot) notifyExecutors(order *model.Order) {
    executors, err := tg.service.GetUsersBySpecialization(order.Specialization)
    if err != nil {
        log.Printf("Error getting executors: %v", err)
        return
    }

    log.Println(executors)
    for _, executor := range executors {
        chatID, _ := strconv.ParseInt(executor.ChatId, 10, 64)
        
        notificationMsg := fmt.Sprintf(`üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üìã *%s*
üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: *%s*
üìù %s
üìç %s
üïí %s

–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ?`, 
            order.Title,
            order.Specialization,
            order.Description,
            order.Location,
            order.CreatedAt.Format("02.01.2006 15:04"))

        buttons := [][]tgbotapi.InlineKeyboardButton{
            {
                tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", fmt.Sprintf("respond_to_order:%d", order.ID)),
            },
        }
        keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

        msg := tgbotapi.NewMessage(chatID, notificationMsg)
        msg.ParseMode = "Markdown"
        msg.ReplyMarkup = keyboard
        
        if _, err := tg.bot.Send(msg); err != nil {
            log.Printf("Error notifying executor %d: %v", chatID, err)
        }
    }
}

func (tg *TgBot) handleOrderResponse(chatID int64, orderID string) {
    log.Printf("Starting to handle order response for chatID: %d, orderID: %s", chatID, orderID)

    // Get executor info
    log.Printf("Fetching executor info for chatID: %d", chatID)
    executor, err := tg.service.GetUserByChatID(strconv.FormatInt(chatID, 10))
    if err != nil {
        log.Printf("Error getting executor with chatID %d: %v", chatID, err)
        response := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        tg.bot.Send(response)
        return
    }
    log.Printf("Successfully retrieved executor: %+v", executor)

    // Store response in database
    log.Printf("Creating order response in database. OrderID: %s, ExecutorID: %s", orderID, executor.ChatId)
    if err = tg.orderResponseService.CreateOrderResponse(orderID, executor.Id); err != nil {
        log.Printf("Error creating order response in database: %v", err)
        response := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        tg.bot.Send(response)
        return
    }
    log.Printf("Successfully created order response in database")

    // Send confirmation to executor
    log.Printf("Sending confirmation message to executor with chatID: %d", chatID)
    msg := `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑!

–ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ Telegram.`
    response := tgbotapi.NewMessage(chatID, msg)
    if _, err := tg.bot.Send(response); err != nil {
        log.Printf("Error sending confirmation to executor: %v", err)
        return
    }
    log.Printf("Successfully sent confirmation to executor")

    // Get order details to find customer
    log.Printf("Fetching order details for orderID: %s", orderID)
    order, err := tg.orderService.GetOrderByID(orderID)
    if err != nil {
        log.Printf("Error getting order details: %v", err)
        return
    }
    log.Printf("Successfully retrieved order: %+v", order)

    // Convert customer's chat ID from string to int64
    log.Printf("Converting customer chatID from string to int64: %s", order.User.ChatId)
    customerChatID, err := strconv.ParseInt(order.User.ChatId, 10, 64)
    if err != nil {
        log.Printf("Error parsing customer chat ID '%s': %v", order.User.ChatId, err)
        return
    }
    log.Printf("Successfully converted customer chatID to: %d", customerChatID)

    // Escape the username to handle Telegram Markdown formatting
    escapedUserName := escapeMarkdown(executor.UserName)

    // Prepare and send executor's profile to customer
    log.Printf("Preparing notification message for customer with chatID: %d", customerChatID)
    profileText := fmt.Sprintf(`üîî –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑ *"%s"*, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –Ω–∞–ø—Ä—è–º—É—é!

üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:*
üì∏ *–†–æ–ª—å:* %s
üë§ *–ò–º—è:* %s
üîç *Username:* @%s
üéØ *–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:* %s`, 
        escapeMarkdown(order.Title),
        escapeMarkdown(executor.Role),
        escapeMarkdown(executor.Name),
        escapedUserName,
        escapeMarkdown(executor.Specialization),
    )

    buttons := [][]tgbotapi.InlineKeyboardButton{
        {
            tgbotapi.NewInlineKeyboardButtonURL("üé® –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", executor.Portfolio),
        },
    }
    keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

    customerMsg := tgbotapi.NewMessage(customerChatID, profileText)
    customerMsg.ParseMode = "Markdown"
    customerMsg.ReplyMarkup = keyboard

    log.Printf("Sending notification to customer with chatID: %d", customerChatID)
    if _, err := tg.bot.Send(customerMsg); err != nil {
        log.Printf("Error sending notification to customer: %v", err)
        return
    }
    log.Printf("Successfully sent notification to customer about new response")
}


func (tg *TgBot) handleOrderSpecializationSelection(chatID int64, data string) {
    tg.stateMutex.Lock()
    order, exists := tg.orderData[chatID]
    if !exists {
        tg.stateMutex.Unlock()
        response := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.")
        tg.bot.Send(response)
        return
    }

    // Set specialization based on selection
    order.Specialization = map[string]string{
        "order_spec_videographer": "–í–∏–¥–µ–æ–æ–ø–µ—Ä–∞—Ç–æ—Ä",
        "order_spec_photographer": "–§–æ—Ç–æ–≥—Ä–∞—Ñ",
    }[data]

    // Move to next state
    tg.userStates[chatID] = StateEnteringOrderTitle
    tg.stateMutex.Unlock()

    // Prompt for order title
    msg := `üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:
–ù–∞–ø—Ä–∏–º–µ—Ä: "–°–≤–∞–¥–µ–±–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è" –∏–ª–∏ "–í–∏–¥–µ–æ—Å—ä—ë–º–∫–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"`

    response := tgbotapi.NewMessage(chatID, msg)
    tg.bot.Send(response)
}

func escapeMarkdown(text string) string {
    // Escape Telegram Markdown special characters
    replacer := strings.NewReplacer(
        "_", "\\_",
        "*", "\\*",
        "[", "\\[",
        "]", "\\]",
        "(", "\\(",
        ")", "\\)",
        "`", "\\`",
    )
    return replacer.Replace(text)
}
